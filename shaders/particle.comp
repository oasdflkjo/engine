#version 430 core

layout(std430, binding = 0) buffer Position {
    vec2 positions[];
};

layout(std430, binding = 1) buffer Velocity {
    vec2 velocities[];
};

layout(std430, binding = 2) buffer VelocityMagnitude {
    float velocityMags[];
};

uniform float delta_time;
uniform int num_particles;

layout(local_size_x = 256) in;

const float G = 0.00001;       // Gravitational constant
const float softening = 0.1;   // Softening to prevent numerical instability
const float maxForce = 2.0;    // Force cap to prevent extreme accelerations
const float dampening = 0.999; // Very slight dampening to maintain energy

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= num_particles) return;

    vec2 pos = positions[index];
    vec2 vel = velocities[index];
    vec2 totalForce = vec2(0.0);

    // Calculate gravitational forces from other particles
    for (int i = 0; i < num_particles; i++) {
        if (i == index) continue;

        vec2 other = positions[i];
        vec2 diff = other - pos;
        float distSq = dot(diff, diff) + softening;
        
        if (distSq < 0.01) continue; // Ignore extremely close particles
        
        // Calculate gravitational force with inverse square law
        vec2 force = normalize(diff) * G / distSq;
        
        // Limit maximum force
        float forceMag = length(force);
        if (forceMag > maxForce) {
            force = normalize(force) * maxForce;
        }
        
        totalForce += force;
    }

    // Update velocity and position
    vel += totalForce * delta_time;
    vel *= dampening;
    pos += vel * delta_time;
    
    // Store updated values
    positions[index] = pos;
    velocities[index] = vel;
    velocityMags[index] = length(vel);
}