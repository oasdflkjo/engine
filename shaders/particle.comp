#version 430
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(std430, binding = 0) buffer Position {
    vec2 positions[];
};

layout(std430, binding = 1) buffer Velocity {
    vec2 velocities[];
};

layout(std430, binding = 2) buffer VelocityMagnitude {
    float velocityMags[];
};

uniform float delta_time;
uniform vec2 mouse_pos;
uniform int num_particles;
uniform int particle_offset;
uniform int batch_size;

void main() {
    // Correct global ID calculation using built-in variables
    uint global_id = gl_GlobalInvocationID.x + 
                    gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x);
                    
    uint particle_id = particle_offset + global_id;
    if (particle_id >= num_particles) return;  // Check against total particle count

    // Process particle
    vec2 pos = positions[particle_id];
    vec2 vel = velocities[particle_id];
    
    // Update position first
    pos += vel * delta_time;
    
    // Calculate force towards mouse
    vec2 to_mouse = mouse_pos - pos;
    float dist = length(to_mouse);
    
    if (dist > 0.0001) {
        // More aggressive attraction for particles far away
        float force_strength = 150.0 / (dist + 1.0);  // Changed from inverse square
        force_strength = min(force_strength, 200.0);
        
        vel += normalize(to_mouse) * force_strength * delta_time;
    }
    
    // Apply velocity limits
    float speed = length(vel);
    if (speed > 100.0) {  // Increased terminal velocity
        vel = normalize(vel) * 100.0;
    }
    
    // Lighter dampening to maintain more energy
    vel *= 1.0 - (0.9 * delta_time);
    
    // Store results
    positions[particle_id] = pos;
    velocities[particle_id] = vel;
    velocityMags[particle_id] = length(vel);
}